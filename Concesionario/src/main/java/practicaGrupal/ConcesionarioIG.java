/****************************************
 * NOMBRE: AdriÃ¡n Sanz Contreras        *
 * DNI: 49097240-Z                      *
 * NÂº EXP: 145                          *
 *                                      *
 * NOMBRE: Alfonso SantamarÃ­a RodrÃ­guez *
 * DNI: 49095131-K                      *   
 * NÂº EXP: 63                           *
 *                                      *
 * NOMBRE: Fco Javier Pasamontes Moreno *
 * DNI: 47516684-H                      *
 * NÂº EXP: 153                          *
 *                                      *
 * 2Âº GRADO EN INGERNIERÃ�A DEL SOFTWARE *
 * CURSO: 2011-2012                     *
 ****************************************/
/*
 * ConcesionarioIG.java
 *
 * Created on 02-dic-2011, 15:18:42
 */
package practicaGrupal;

import java.awt.Component;
import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.JButton;


public class ConcesionarioIG extends javax.swing.JFrame {

    private Concesionario miConcesionario = new Concesionario();
    private String user = new String();
    
    /** Creates new form ConcesionarioIG */
    public ConcesionarioIG() {
        initComponents(); 
        //Centramos la ventana en la pantalla
        this.setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDireccion = new javax.swing.JPanel();
        jbAccesoAProveedores = new javax.swing.JButton();
        jbGestionarEmpleados = new javax.swing.JButton();
        jbMoverCocheAExposicion = new javax.swing.JButton();
        jbGestionarExposiciones = new javax.swing.JButton();
        jbGestionarClientes = new javax.swing.JButton();
        jbPonerEnVenta = new javax.swing.JButton();
        jpZonaComun = new javax.swing.JPanel();
        jbConsultas = new javax.swing.JButton();
        jpVendedor = new javax.swing.JPanel();
        jbVenderCoche = new javax.swing.JButton();
        jbReservarCoche = new javax.swing.JButton();
        jbCancelarReserva = new javax.swing.JButton();
        jpMecanica = new javax.swing.JPanel();
        jbPonerEnReparacion = new javax.swing.JButton();
        jbRepararCoche = new javax.swing.JButton();
        jbGestionarCochesConcesionario = new javax.swing.JButton();
        jmbBarraPpal = new javax.swing.JMenuBar();
        jmPrograma = new javax.swing.JMenu();
        jmiIniciarSesion = new javax.swing.JMenuItem();
        jmiCerrarSesion = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jmiSalir = new javax.swing.JMenuItem();
        jmFichero = new javax.swing.JMenu();
        jmiCargar = new javax.swing.JMenuItem();
        jmiGuardar = new javax.swing.JMenuItem();
        jmAyuda = new javax.swing.JMenu();
        jmiAyuda = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Concesionario");
        setLocationByPlatform(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpDireccion.setBorder(javax.swing.BorderFactory.createTitledBorder("Zona de direccion"));

        jbAccesoAProveedores.setText("Acceso a proveedores");
        jbAccesoAProveedores.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbAccesoAProveedores.setEnabled(false);
        jbAccesoAProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAccesoAProveedoresActionPerformed(evt);
            }
        });

        jbGestionarEmpleados.setText("Gestionar empleados");
        jbGestionarEmpleados.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbGestionarEmpleados.setEnabled(false);
        jbGestionarEmpleados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGestionarEmpleadosActionPerformed(evt);
            }
        });

        jbMoverCocheAExposicion.setText("Mover coche a exposicion");
        jbMoverCocheAExposicion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbMoverCocheAExposicion.setEnabled(false);
        jbMoverCocheAExposicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoverCocheAExposicionActionPerformed(evt);
            }
        });

        jbGestionarExposiciones.setText("Gestionar exposiciones");
        jbGestionarExposiciones.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbGestionarExposiciones.setEnabled(false);
        jbGestionarExposiciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGestionarExposicionesActionPerformed(evt);
            }
        });

        jbGestionarClientes.setText("Gestionar clientes");
        jbGestionarClientes.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbGestionarClientes.setEnabled(false);
        jbGestionarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGestionarClientesActionPerformed(evt);
            }
        });

        jbPonerEnVenta.setText("Poner coche del concesionario en venta");
        jbPonerEnVenta.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbPonerEnVenta.setEnabled(false);
        jbPonerEnVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPonerEnVentaActionPerformed(evt);
            }
        });

        jpZonaComun.setBorder(javax.swing.BorderFactory.createTitledBorder("Zona comÃºn"));

        jbConsultas.setText("Consultas");
        jbConsultas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbConsultas.setEnabled(false);
        jbConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConsultasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpZonaComunLayout = new javax.swing.GroupLayout(jpZonaComun);
        jpZonaComun.setLayout(jpZonaComunLayout);
        jpZonaComunLayout.setHorizontalGroup(
            jpZonaComunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpZonaComunLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jbConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jpZonaComunLayout.setVerticalGroup(
            jpZonaComunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpZonaComunLayout.createSequentialGroup()
                .addComponent(jbConsultas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpVendedor.setBorder(javax.swing.BorderFactory.createTitledBorder("Zona de ventas"));

        jbVenderCoche.setText("Vender coche");
        jbVenderCoche.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbVenderCoche.setEnabled(false);
        jbVenderCoche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVenderCocheActionPerformed(evt);
            }
        });

        jbReservarCoche.setText("Reservar coche");
        jbReservarCoche.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbReservarCoche.setEnabled(false);
        jbReservarCoche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReservarCocheActionPerformed(evt);
            }
        });

        jbCancelarReserva.setText("Cancelar una reserva");
        jbCancelarReserva.setEnabled(false);
        jbCancelarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarReservaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpVendedorLayout = new javax.swing.GroupLayout(jpVendedor);
        jpVendedor.setLayout(jpVendedorLayout);
        jpVendedorLayout.setHorizontalGroup(
            jpVendedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpVendedorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpVendedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbCancelarReserva, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(jbReservarCoche, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(jbVenderCoche, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                .addGap(19, 19, 19))
        );
        jpVendedorLayout.setVerticalGroup(
            jpVendedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpVendedorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbVenderCoche)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbCancelarReserva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jbReservarCoche)
                .addContainerGap())
        );

        jpMecanica.setBorder(javax.swing.BorderFactory.createTitledBorder("Zona de mecÃ¡nica"));

        jbPonerEnReparacion.setText("Poner en reparacion");
        jbPonerEnReparacion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbPonerEnReparacion.setEnabled(false);
        jbPonerEnReparacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPonerEnReparacionActionPerformed(evt);
            }
        });

        jbRepararCoche.setText("Reparar coche");
        jbRepararCoche.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbRepararCoche.setEnabled(false);
        jbRepararCoche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRepararCocheActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpMecanicaLayout = new javax.swing.GroupLayout(jpMecanica);
        jpMecanica.setLayout(jpMecanicaLayout);
        jpMecanicaLayout.setHorizontalGroup(
            jpMecanicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMecanicaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpMecanicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbRepararCoche, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(jbPonerEnReparacion, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpMecanicaLayout.setVerticalGroup(
            jpMecanicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMecanicaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbRepararCoche)
                .addGap(18, 18, 18)
                .addComponent(jbPonerEnReparacion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbGestionarCochesConcesionario.setText("Gestionar coches del concesionario");
        jbGestionarCochesConcesionario.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbGestionarCochesConcesionario.setEnabled(false);
        jbGestionarCochesConcesionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGestionarCochesConcesionarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpDireccionLayout = new javax.swing.GroupLayout(jpDireccion);
        jpDireccion.setLayout(jpDireccionLayout);
        jpDireccionLayout.setHorizontalGroup(
            jpDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDireccionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpDireccionLayout.createSequentialGroup()
                        .addComponent(jpZonaComun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101))
                    .addGroup(jpDireccionLayout.createSequentialGroup()
                        .addGroup(jpDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpDireccionLayout.createSequentialGroup()
                                .addComponent(jbAccesoAProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addComponent(jbGestionarEmpleados, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                            .addComponent(jbGestionarClientes, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                            .addGroup(jpDireccionLayout.createSequentialGroup()
                                .addComponent(jbGestionarCochesConcesionario, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(jpDireccionLayout.createSequentialGroup()
                                .addComponent(jbGestionarExposiciones, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                                .addGap(18, 18, 18))
                            .addComponent(jbMoverCocheAExposicion, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                            .addComponent(jbPonerEnVenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jpVendedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jpMecanica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        jpDireccionLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbAccesoAProveedores, jbGestionarClientes, jbGestionarCochesConcesionario, jbGestionarEmpleados, jbGestionarExposiciones, jbMoverCocheAExposicion, jbPonerEnVenta});

        jpDireccionLayout.setVerticalGroup(
            jpDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDireccionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDireccionLayout.createSequentialGroup()
                        .addComponent(jbAccesoAProveedores)
                        .addGap(18, 18, 18)
                        .addComponent(jbGestionarEmpleados)
                        .addGap(18, 18, 18)
                        .addComponent(jbGestionarClientes))
                    .addComponent(jpMecanica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpDireccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpDireccionLayout.createSequentialGroup()
                        .addComponent(jbGestionarCochesConcesionario)
                        .addGap(18, 18, 18)
                        .addComponent(jbGestionarExposiciones)
                        .addGap(18, 18, 18)
                        .addComponent(jbMoverCocheAExposicion)
                        .addGap(18, 18, 18)
                        .addComponent(jbPonerEnVenta))
                    .addComponent(jpVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpZonaComun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jmPrograma.setText("Programa");

        jmiIniciarSesion.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jmiIniciarSesion.setText("Iniciar sesion");
        jmiIniciarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiIniciarSesionActionPerformed(evt);
            }
        });
        jmPrograma.add(jmiIniciarSesion);

        jmiCerrarSesion.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jmiCerrarSesion.setText("Cerrar sesion");
        jmiCerrarSesion.setEnabled(false);
        jmiCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCerrarSesionActionPerformed(evt);
            }
        });
        jmPrograma.add(jmiCerrarSesion);
        jmPrograma.add(jSeparator3);

        jmiSalir.setText("Salir");
        jmiSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalirActionPerformed(evt);
            }
        });
        jmPrograma.add(jmiSalir);

        jmbBarraPpal.add(jmPrograma);

        jmFichero.setText("Fichero");

        jmiCargar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jmiCargar.setText("Cargar");
        jmiCargar.setEnabled(false);
        jmiCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCargarActionPerformed(evt);
            }
        });
        jmFichero.add(jmiCargar);

        jmiGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jmiGuardar.setText("Guardar");
        jmiGuardar.setEnabled(false);
        jmiGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGuardarActionPerformed(evt);
            }
        });
        jmFichero.add(jmiGuardar);

        jmbBarraPpal.add(jmFichero);

        jmAyuda.setText("Ayuda");

        jmiAyuda.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jmiAyuda.setText("Ayuda");
        jmiAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAyudaActionPerformed(evt);
            }
        });
        jmAyuda.add(jmiAyuda);

        jmbBarraPpal.add(jmAyuda);

        setJMenuBar(jmbBarraPpal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbGestionarEmpleadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGestionarEmpleadosActionPerformed
        GestionarEmpleadosIG gestEmp = new GestionarEmpleadosIG(this, true);

        gestEmp.cargarEmpleados(this.miConcesionario.getEmpleados(), this.miConcesionario.getComisionarios());

        gestEmp.setLocationRelativeTo(null);
        gestEmp.setVisible(true);

        this.miConcesionario.setEmpleados(gestEmp.getListaEmpleado());
        this.miConcesionario.setComisionarios(gestEmp.getListaComisionario());
    }//GEN-LAST:event_jbGestionarEmpleadosActionPerformed

    private void jmiCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCargarActionPerformed
        boolean finFichero = false;

        //Cada vez que cargamos, creamos un nuevo concesionario, borrando asÃ­
        //el anterior
        this.miConcesionario = new Concesionario();
        System.gc();
        
        //Determinamos la accion a realizar dependiendo de si hemos abierto
        //un fichero o no

        //Cargamos los empleados y/o comisionarios del fichero de empleados
        try {
            ObjectInputStream entradaObjetos =
                    new ObjectInputStream(new FileInputStream("Empleados.dat"));
            try {
                Object aux = entradaObjetos.readObject();
                this.miConcesionario.getEmpleados().clear();
                this.miConcesionario.getComisionarios().clear();
                while (!finFichero) {
                    if (aux instanceof Empleado) {
                        this.miConcesionario.getEmpleados().add((Empleado) aux);
                    } else if (aux instanceof Comisionario) {
                        this.miConcesionario.getComisionarios().add((Comisionario) aux);
                    }
                    //Controlamos que no lleguemos al final del fichero
                    try {
                        aux = entradaObjetos.readObject();
                    } catch (Exception ex) {
                        finFichero = true;
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "No hay empleados guardados");
            }
            entradaObjetos.close();
        } catch (Exception ex) {
            this.ejecutarSiNoHayFichero("Empleados.dat");
        }
   

        //Cargamos los coches del concesionario del fichero
        finFichero = false;
        try {
            ObjectInputStream entradaObjetos =
                    new ObjectInputStream(new FileInputStream("CochesConcesionario.dat"));
            try {
                Object aux = entradaObjetos.readObject();
                this.miConcesionario.getCochesConcesionario().clear();
                while (!finFichero) {
                    this.miConcesionario.getCochesConcesionario().add((CocheConcesionario) aux);
                    try {
                        aux = entradaObjetos.readObject();
                    } catch (Exception ex) {
                        finFichero = true;
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "No hay coches de concesionario guardados");
            }
            entradaObjetos.close();
        } catch (Exception ex) {
            this.ejecutarSiNoHayFichero("CochesConcesionario.dat");
        }


        //Cargamos los proveedores del fichero
        finFichero = false;
        try {
            ObjectInputStream entradaObjetos =
                    new ObjectInputStream(new FileInputStream("Proveedores.dat"));
            try {
                Object aux = entradaObjetos.readObject();
                this.miConcesionario.getProveedores().clear();
                while (!finFichero) {
                    this.miConcesionario.getProveedores().add((Proveedor) aux);
                    try {
                        aux = entradaObjetos.readObject();
                    } catch (Exception ex) {
                        finFichero = true;
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "No hay proveedores guardados");
            }
            entradaObjetos.close();
        } catch (Exception ex) {
            this.ejecutarSiNoHayFichero("Proveedores.dat");
        }

        //Cargamos las exposiciones del fichero
        finFichero = false;
        try {
            ObjectInputStream entradaObjetos =
                    new ObjectInputStream(new FileInputStream("Exposiciones.dat"));
            try {
                Object aux = entradaObjetos.readObject();
                this.miConcesionario.getExposiciones().clear();
                while (!finFichero) {
                    this.miConcesionario.getExposiciones().add((Exposicion) aux);
                    try {
                        aux = entradaObjetos.readObject();
                    } catch (Exception ex) {
                        finFichero = true;
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "No hay exposiciones guardadas");
            }
            entradaObjetos.close();
        } catch (Exception ex) {
            this.ejecutarSiNoHayFichero("Exposiciones.dat");
        }
        

         //Cargamos los clientes del fichero
        finFichero = false;
        try {
            ObjectInputStream entradaObjetos =
                    new ObjectInputStream(new FileInputStream("Clientes.dat"));
            try {
                Object aux = entradaObjetos.readObject();
                this.miConcesionario.getClientes().clear();
                while (!finFichero) {
                    this.miConcesionario.getClientes().add((Cliente) aux);
                    try {
                        aux = entradaObjetos.readObject();
                    } catch (Exception ex) {
                        finFichero = true;
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "No hay clientes guardados");
            }
            entradaObjetos.close();
        } catch (Exception ex) {
            this.ejecutarSiNoHayFichero("Clientes.dat");
        }
        JOptionPane.showMessageDialog(this, "Datos cargados");
        
    }//GEN-LAST:event_jmiCargarActionPerformed

    private void jmiGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGuardarActionPerformed
        boolean guardadoCorrecto = true;
        //Determinamos la accion a realizar dependiendo de si hemos abierto
        //un fichero o no
        

        //Guardamos los empleados en el fichero
        try {
            ObjectOutputStream salidaObjetos =
                    new ObjectOutputStream(new FileOutputStream("Empleados.dat"));
            //Guardamos los empleados
            for (int i = 0; i < this.miConcesionario.getEmpleados().size(); i++) {
                salidaObjetos.writeObject(this.miConcesionario.getEmpleados().get(i));
            }

            //Guardamos los comisionarios
            for (int i = 0; i < this.miConcesionario.getComisionarios().size(); i++) {
                salidaObjetos.writeObject(this.miConcesionario.getComisionarios().get(i));
            }

            //Cerramos el fichero
            salidaObjetos.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Fallo al guardar");
            guardadoCorrecto = false;
        }

        //Guardamos los coches del concesionario en el fichero
        try {
            ObjectOutputStream salidaObjetos =
                    new ObjectOutputStream(new FileOutputStream("CochesConcesionario.dat"));
            for (int i = 0; i < this.miConcesionario.getCochesConcesionario().size(); i++) {
                salidaObjetos.writeObject(this.miConcesionario.getCochesConcesionario().get(i));
            }
            salidaObjetos.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Fallo al guardar");
            guardadoCorrecto = false;
        }


        //Guardamos los proveedores en el fichero
        try {
            ObjectOutputStream salidaObjetos =
                    new ObjectOutputStream(new FileOutputStream("Proveedores.dat"));
            for (int i = 0; i < this.miConcesionario.getProveedores().size(); i++) {
                salidaObjetos.writeObject(this.miConcesionario.getProveedores().get(i));
            }
            salidaObjetos.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Fallo al guardar");
            guardadoCorrecto = false;
        }


        //Guardamos las exposiciones en el fichero
        try {
            ObjectOutputStream salidaObjetos =
                    new ObjectOutputStream(new FileOutputStream("Exposiciones.dat"));
            for (int i = 0; i < this.miConcesionario.getExposiciones().size(); i++) {
                salidaObjetos.writeObject(this.miConcesionario.getExposiciones().get(i));
            }
            salidaObjetos.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Fallo al guardar");
            guardadoCorrecto = false;
        }
        
        //Guardamos los clientes en el fichero
        try {
            ObjectOutputStream salidaObjetos =
                    new ObjectOutputStream(new FileOutputStream("Clientes.dat"));
            for (int i = 0; i < this.miConcesionario.getClientes().size(); i++) {
                salidaObjetos.writeObject(this.miConcesionario.getClientes().get(i));
            }
            salidaObjetos.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Fallo al guardar");
            guardadoCorrecto = false;
        }
        
        
        
        
        //Guardamos a los empleados y a los clientes en un fichero especial para
        //comprobar el nivel de restriccion del usuario al iniciar sesion
        try {
            ObjectOutputStream salidaObjetos =
                    new ObjectOutputStream(new FileOutputStream("Usuarios.dat"));
            //Guardamos los empleados
            for (int i = 0; i < this.miConcesionario.getEmpleados().size(); i++) {
                salidaObjetos.writeObject(this.miConcesionario.getEmpleados().get(i));
            }

            //Guardamos los comisionarios
            for (int i = 0; i < this.miConcesionario.getComisionarios().size(); i++) {
                salidaObjetos.writeObject(this.miConcesionario.getComisionarios().get(i));
            }

            //Guardamos los clientes
            for (int i = 0; i < this.miConcesionario.getClientes().size(); i++) {
                salidaObjetos.writeObject(this.miConcesionario.getClientes().get(i));
            }
            
            //Creamos el superUsuario
            Persona superUser = new Persona("super usuario", "no dni","", 0);
             salidaObjetos.writeObject(superUser);
            
            
            //Cerramos el fichero
            salidaObjetos.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Fallo al guardar");
            guardadoCorrecto = false;
        }

        if (guardadoCorrecto){
            JOptionPane.showMessageDialog(this, "Fallo al guardar");
        }
    }//GEN-LAST:event_jmiGuardarActionPerformed

    private void jbAccesoAProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAccesoAProveedoresActionPerformed
        AccesoAProveedoresIG acProv = new AccesoAProveedoresIG(this, true);

        acProv.setMisProveedores(this.miConcesionario.getProveedores());
        acProv.setCochesConcesionario(this.miConcesionario.getCochesConcesionario());

        acProv.setLocationRelativeTo(null);
        acProv.setVisible(true);

        this.miConcesionario.setProveedores(acProv.getMisProveedores());
        this.miConcesionario.setCochesConcesionario(acProv.getCochesConcesionario());
    }//GEN-LAST:event_jbAccesoAProveedoresActionPerformed

    private void jbGestionarExposicionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGestionarExposicionesActionPerformed
        GestionDeExposicionesIG gestExp = new GestionDeExposicionesIG(this, true);

        //gestExp.setMisExposiciones(this.miConcesionario.exposiciones);
        gestExp.cargarExposiciones(this.miConcesionario.getExposiciones());

        gestExp.setLocationRelativeTo(null);
        gestExp.setVisible(true);

        this.miConcesionario.setExposiciones(gestExp.getMisExposiciones());

    }//GEN-LAST:event_jbGestionarExposicionesActionPerformed

    private void jbGestionarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGestionarClientesActionPerformed
        GestionDeClientesIG gestClien = new GestionDeClientesIG(this, true);

        gestClien.cargarClientes(this.miConcesionario.getClientes());

        gestClien.setLocationRelativeTo(null);
        gestClien.setVisible(true);

        this.miConcesionario.setClientes(gestClien.getMisClientes());

    }//GEN-LAST:event_jbGestionarClientesActionPerformed

    private void jbVenderCocheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVenderCocheActionPerformed
        VentaCocheIG ventaCoche = new VentaCocheIG(this, true);

        ventaCoche.cargarVendedores(this.miConcesionario.getEmpleados(), 
                this.miConcesionario.getComisionarios());
        ventaCoche.cargarClientes(this.miConcesionario.getClientes());
        ventaCoche.cargarCoches(this.miConcesionario.getCochesConcesionario());
        ventaCoche.setMisExposiciones(this.miConcesionario.getExposiciones());
        ventaCoche.setLocationRelativeTo(null);
        ventaCoche.setVisible(true);

        this.miConcesionario.setClientes(ventaCoche.getMisClientes());
        this.miConcesionario.setComisionarios(ventaCoche.getMisComisionarios());
        this.miConcesionario.setEmpleados(ventaCoche.getMisEmpleados());
        this.miConcesionario.setCochesConcesionario(ventaCoche.getMisCoches());

    }//GEN-LAST:event_jbVenderCocheActionPerformed

private void jbRepararCocheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRepararCocheActionPerformed

    RepararCocheIG rc = new RepararCocheIG(this, true);
    
    rc.InicializarIG(this.miConcesionario.getCochesConcesionario());
    rc.setLocationRelativeTo(null);
    rc.setVisible(true);
    
    this.miConcesionario.setCochesConcesionario(rc.getListaCocheCon());
}//GEN-LAST:event_jbRepararCocheActionPerformed

private void jbPonerEnReparacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPonerEnReparacionActionPerformed
// TODO add your handling code here:
    PonerReparacionIG pr = new PonerReparacionIG (this,true);
    pr.CargarCoches(this.miConcesionario.getCochesConcesionario());
    pr.setLocationRelativeTo(null);
    pr.setVisible(true);
    this.miConcesionario.setCochesConcesionario(pr.getListaCoche());
}//GEN-LAST:event_jbPonerEnReparacionActionPerformed

    private void jbMoverCocheAExposicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoverCocheAExposicionActionPerformed
        // TODO add your handling code here:
        MoverCocheAExposicionIG moverCoche = new MoverCocheAExposicionIG(this, true);

        moverCoche.setMisCoches(this.miConcesionario.getCochesConcesionario());
        moverCoche.setMisExposiciones(this.miConcesionario.getExposiciones());
        moverCoche.cargarExposiciones();
        moverCoche.cargarCoches();

        moverCoche.setLocationRelativeTo(null);
        moverCoche.setVisible(true);

        this.miConcesionario.setCochesConcesionario(moverCoche.getMisCoches());
        this.miConcesionario.setExposiciones(moverCoche.getMisExposiciones());
    }//GEN-LAST:event_jbMoverCocheAExposicionActionPerformed

private void jbPonerEnVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPonerEnVentaActionPerformed
// TODO add your handling code here:
    PonerVentaIG pv = new PonerVentaIG(this,true);
    pv.CargarCoches(this.miConcesionario.getCochesConcesionario());
    pv.setLocationRelativeTo(null);
    pv.setVisible(true);
    this.miConcesionario.setCochesConcesionario(pv.getListaCoche());
}//GEN-LAST:event_jbPonerEnVentaActionPerformed

    private void jbGestionarCochesConcesionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGestionarCochesConcesionarioActionPerformed
        GestionarCochesConcesionarioIG gcc = new GestionarCochesConcesionarioIG(null,true);
        
        gcc.setMisCochesC(this.miConcesionario.getCochesConcesionario());
        gcc.cargarCochesDeConcesionario();
        
        gcc.setLocationRelativeTo(null);
        gcc.setVisible(true);
        
        this.miConcesionario.setCochesConcesionario(gcc.getMisCochesC());
    }//GEN-LAST:event_jbGestionarCochesConcesionarioActionPerformed

    private void jbReservarCocheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReservarCocheActionPerformed
       ReservarIG reserva = new ReservarIG(this,true);
       
        reserva.InicializarIG(this.miConcesionario.getClientes(), this.miConcesionario.getCochesConcesionario());
        reserva.setLocationRelativeTo(null);
        reserva.setVisible(true);
        
        this.miConcesionario.setClientes(reserva.getMiCliente());
        this.miConcesionario.setCochesConcesionario(reserva.getMisCoches());
    }//GEN-LAST:event_jbReservarCocheActionPerformed

    private void jbCancelarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarReservaActionPerformed
        CancelarReservaIG cr = new CancelarReservaIG(this,true);
        
        cr.setMisCoches(this.miConcesionario.getCochesConcesionario());
        cr.cargarClientes(this.miConcesionario.getClientes());
        cr.iniciarCoche();
        
        cr.setLocationRelativeTo(null);
        cr.setVisible(true);
        
        this.miConcesionario.setClientes(cr.getMiCliente());    
    }//GEN-LAST:event_jbCancelarReservaActionPerformed

    private void jbConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConsultasActionPerformed
        MenuConsultas consultas = new MenuConsultas(null,true);
        
        consultas.setConceConsulta(this.miConcesionario);
        consultas.setLocationRelativeTo(null);
        consultas.setVisible(true);
    }//GEN-LAST:event_jbConsultasActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       if (JOptionPane.showConfirmDialog(null, "Â¿Desea salir?", "Concesionario",
               JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE)
               == JOptionPane.YES_OPTION){
           System.exit(0);
       }
       else{
           return;
       }
           
    }//GEN-LAST:event_formWindowClosing

    private void jmiSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalirActionPerformed
        this.formWindowClosing(null);
    }//GEN-LAST:event_jmiSalirActionPerformed

    private void jmiIniciarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiIniciarSesionActionPerformed
        boolean finFichero;
        boolean entraComoUsuarioNormal = true;
        boolean encontradoUser = false;
        Object aux = new Object();
        
        //Mostramos un cuadro de diÃ¡logo para pedir el nÃºmero de Dni y poder
        //iniciar sesion
        String dniBuscar = JOptionPane.showInputDialog(this, 
                "Introduzca su dni para iniciar sesion:");
        
        
        //Recorremos el fichero de usuarios para entrar a la aplicacion
        finFichero = false;
        try {
            ObjectInputStream entradaObjetos =
                    new ObjectInputStream(new FileInputStream("Usuarios.dat"));
            try {
                aux = entradaObjetos.readObject();
                while (!finFichero && !encontradoUser) {
                    encontradoUser = ((Persona) aux).getDni().equalsIgnoreCase(dniBuscar.trim());
                    if (!encontradoUser) {
                        //Controlamos que no lleguemos al final del fichero
                        try {
                            aux = entradaObjetos.readObject();
                        } catch (Exception ex) {
                            finFichero = true;
                            
                        }
                    }
                } 
            } catch (Exception ex) {
                //AquÃ­ entra cuando cerramos la ventana de introducir dni de
                //usuario o si pulsamos en cancelar
                JOptionPane.showMessageDialog(null, "Sesion no iniciada");
            }
            entradaObjetos.close();
        } catch (Exception ex) {
            //Como no existe ni siquiera el fichero de usuarios, se crea uno
            //que contendrÃ¡ solo al superusuario. De esta forma, se podrÃ¡ 
            //acceder a la totalidad de las funciones en en caso de que se
            //haya dado de baja un director.
            try {
                ObjectOutputStream salidaObjetos =
                        new ObjectOutputStream(new FileOutputStream("Usuarios.dat"));
                //Creamos el superUsuario
                Persona superUser = new Persona("super usuario", "no dni", "", 0);
                salidaObjetos.writeObject(superUser);
                salidaObjetos.close();
                entraComoUsuarioNormal = false;
            } catch (Exception ex2) {
                JOptionPane.showMessageDialog(this, ex2);
            }
        }
        
        //Si encontramos al usuario, activamos los botones
        if (encontradoUser){
            String tipoUsuario = "";           
            //Si vamos a iniciar sesion como director
            if (aux instanceof Empleado) {
                
                if (((Empleado) aux).getTipoEmpleado().
                        equalsIgnoreCase("Director")) {
                    this.visibilidadDeGrupo(this.jpDireccion.getComponents(), true);
                    this.visibilidadDeGrupo(this.jpMecanica.getComponents(), true);
                    this.visibilidadDeGrupo(this.jpVendedor.getComponents(), true);
                    this.visibilidadDeGrupo(this.jpZonaComun.getComponents(), true);
                    tipoUsuario = "Director";
                }

                //Si vamos a iniciar sesion como mecÃ¡nico
                if (((Empleado) aux).getTipoEmpleado().
                        equalsIgnoreCase("Mecanico")) {
                    this.visibilidadDeGrupo(this.jpMecanica.getComponents(), true);
                    this.visibilidadDeGrupo(this.jpZonaComun.getComponents(), true);
                     tipoUsuario = "Mecanico";
                }

                //Si vamos a iniciar sesion como vendedor
                if (((Empleado) aux).getTipoEmpleado().
                        equalsIgnoreCase("Vendedor")) {
                    this.visibilidadDeGrupo(this.jpVendedor.getComponents(), true);
                    this.visibilidadDeGrupo(this.jpZonaComun.getComponents(), true);
                     tipoUsuario = "Vendedor";
                }
            }
            
            //Si vamos a iniciar sesion como vendedores a comision
            if (aux instanceof Comisionario) {
                this.visibilidadDeGrupo(this.jpVendedor.getComponents(), true);
                this.visibilidadDeGrupo(this.jpZonaComun.getComponents(), true);
                 tipoUsuario = "Vendedor a comision";
            }
   
            //Si vamos a iniciar sesion como clientes
            if (aux instanceof Cliente) {
                this.visibilidadDeGrupo(this.jpZonaComun.getComponents(), true);
                 tipoUsuario = "Cliente";
            }         
            
            //Si vamos a iniciar sesion como super usuario
            if (((Persona)aux).getDni().equalsIgnoreCase("no dni")) {
                    this.visibilidadDeGrupo(this.jpDireccion.getComponents(), true);
                    this.visibilidadDeGrupo(this.jpMecanica.getComponents(), true);
                    this.visibilidadDeGrupo(this.jpVendedor.getComponents(), true);
                    this.visibilidadDeGrupo(this.jpZonaComun.getComponents(), true);
                    tipoUsuario = "Super usuario";
                }
            this.user = ((Persona)aux).getNombre();
            JOptionPane.showMessageDialog(null, "Bienvenido/a Sr/Sra " + this.user);
            this.setTitle(this.getTitle() + " - " + this.user + " - " + tipoUsuario);        
            //Activamos o desactivamos los botones pertinentes
            this.jmiCerrarSesion.setEnabled(true);
            this.jmiIniciarSesion.setEnabled(false);
            this.jmiCargar.setEnabled(true);
            this.jmiGuardar.setEnabled(true);
        }
        else if (finFichero){
            JOptionPane.showMessageDialog(null, "No existe ningÃºn usuario con ese dni");
        }
        else if(!entraComoUsuarioNormal){
            JOptionPane.showMessageDialog(null, 
                    "No se ha encontrado ningÃºn usuario.\n"+
                    "Solo podrÃ¡ entrar como super usuario");
        }
        
            
        
        
                   
    }//GEN-LAST:event_jmiIniciarSesionActionPerformed

    private void jmiCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCerrarSesionActionPerformed
       //Cerramos sesion, o lo que es lo mismo, borramos los datos del
       //concesionario que no hayan sido guardados previamente y desactivamos
       //todos los botones de la interfaz grÃ¡fica
        
       
       this.miConcesionario = new Concesionario();
       this.jmiIniciarSesion.setEnabled(true);
       this.jmiCerrarSesion.setEnabled(false);
       this.jmiCargar.setEnabled(false);
       this.jmiGuardar.setEnabled(false);
       
       this.visibilidadDeGrupo(this.jpDireccion.getComponents(),false);
        this.visibilidadDeGrupo(this.jpMecanica.getComponents(),false);
        this.visibilidadDeGrupo(this.jpVendedor.getComponents(),false);
        this.visibilidadDeGrupo(this.jpZonaComun.getComponents(),false);
        
       this.setTitle("Concesionario");
       JOptionPane.showMessageDialog(this, "Sesion cerrada");
    }//GEN-LAST:event_jmiCerrarSesionActionPerformed

    private void jmiAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAyudaActionPerformed
        try {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "manual.doc");
            //Si se quiere ejecutar con el .pdf:
            //Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + "manual.pdf");
        } catch (IOException e) {
            e.printStackTrace();
}
    }//GEN-LAST:event_jmiAyudaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConcesionarioIG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConcesionarioIG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConcesionarioIG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConcesionarioIG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ConcesionarioIG().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JButton jbAccesoAProveedores;
    private javax.swing.JButton jbCancelarReserva;
    private javax.swing.JButton jbConsultas;
    private javax.swing.JButton jbGestionarClientes;
    private javax.swing.JButton jbGestionarCochesConcesionario;
    private javax.swing.JButton jbGestionarEmpleados;
    private javax.swing.JButton jbGestionarExposiciones;
    private javax.swing.JButton jbMoverCocheAExposicion;
    private javax.swing.JButton jbPonerEnReparacion;
    private javax.swing.JButton jbPonerEnVenta;
    private javax.swing.JButton jbRepararCoche;
    private javax.swing.JButton jbReservarCoche;
    private javax.swing.JButton jbVenderCoche;
    private javax.swing.JMenu jmAyuda;
    private javax.swing.JMenu jmFichero;
    private javax.swing.JMenu jmPrograma;
    private javax.swing.JMenuBar jmbBarraPpal;
    private javax.swing.JMenuItem jmiAyuda;
    private javax.swing.JMenuItem jmiCargar;
    private javax.swing.JMenuItem jmiCerrarSesion;
    private javax.swing.JMenuItem jmiGuardar;
    private javax.swing.JMenuItem jmiIniciarSesion;
    private javax.swing.JMenuItem jmiSalir;
    private javax.swing.JPanel jpDireccion;
    private javax.swing.JPanel jpMecanica;
    private javax.swing.JPanel jpVendedor;
    private javax.swing.JPanel jpZonaComun;
    // End of variables declaration//GEN-END:variables

    private void ejecutarSiNoHayFichero(String nombreFichero){
        if (JOptionPane.showConfirmDialog(null,
                    "El fichero " + nombreFichero+ " no existe.\nÂ¿Desea crearlo?",
                    "Concesionario", JOptionPane.YES_NO_OPTION,
                    JOptionPane.INFORMATION_MESSAGE)
                    == JOptionPane.YES_OPTION) {
                //Crear Empleados.dat
                try{
                    ObjectOutputStream salidaObjetos =
                    new ObjectOutputStream(new FileOutputStream(nombreFichero));
                salidaObjetos.close();
                }
                catch(Exception ex2){
                    JOptionPane.showMessageDialog(this, ex2);
                }
                JOptionPane.showMessageDialog(null, 
                        "Fichero " + nombreFichero + " creado con Ã©xito");
            } 
    }
    
    private void visibilidadDeGrupo(Component[] componentes,boolean estado){
        for (Component boton : componentes) {
            if (boton instanceof JButton) {
                boton.setEnabled(estado);
            }
        }
    }
}
